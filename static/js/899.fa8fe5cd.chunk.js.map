{"version":3,"file":"static/js/899.fa8fe5cd.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://social-network/./src/components/common/FormsControls/formsControls.module.css?b53e","components/common/FormsControls/FormsControls.tsx","hoc/WithAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__F1GDU\",\"dialog\":\"Dialogs_dialog__G-nRP\",\"active\":\"Dialogs_active__UHZ8v\",\"dialog_items\":\"Dialogs_dialog_items__mye34\",\"messages\":\"Dialogs_messages__ovazR\",\"message\":\"Dialogs_message__VqkTT\"};","import React from 'react';\nimport classes from \"../Dialogs.module.css\";\nimport { NavLink } from 'react-router-dom';\n\n\nexport type DialogPropsType = {\n    name: string\n    id: number\n}\n\nconst Dialog = (props: DialogPropsType) => {\n    return (\n        <div className={classes.dialog}><NavLink activeClassName={classes.active} to={`/Dialogs/${props.id}`}> {props.name}</NavLink></div>\n\n    );\n};\n\nexport default Dialog;","import React from 'react';\nimport classes from \"../Dialogs.module.css\";\n\nexport type MessagePropsType = {\n    message: string\n    id: number\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n\n    );\n};\n\nexport default Message;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst AddMessageForm = (props: InjectedFormProps) => {\r\n    const maxLengthCreator50 = maxLengthCreator(50)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field component={Textarea} validate={[required, maxLengthCreator50]} name={\"newMessageBody\"} placeholder={'Enter your message'}/>\r\n\r\n                </div>\r\n                <div>\r\n                    <button>Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n","import React from 'react';\nimport classes from './Dialogs.module.css';\nimport Dialog, {DialogPropsType} from \"./Dialog/Dialog\";\nimport Message, {MessagePropsType} from \"./Message/Message\";\nimport {AddMessageFormRedux} from \"./AddMessageForm\";\n\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogPropsType>\n    messages: Array<MessagePropsType>\n    newMessageBody: string\n    sendMessage: (newMessageBody: string) => void\n    isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const dialogsElements = props.dialogs.map(dialog => <Dialog key={dialog.id} name={dialog.name} id={dialog.id}/>)\n    const messagesElements = props.messages.map(message => <Message key={message.id} message={message.message}\n                                                                    id={message.id}/>)\n\n    const addNewMessage = (values:any) => {\n        props.sendMessage(values.newMessageBody)\n        console.log(values)\n    }\n\n    return (\n        <div className={classes.dialogs}>\n\n            <div className={classes.dialog_items}>\n                {dialogsElements}\n            </div>\n\n            <div className={classes.messages}>\n                <div>{messagesElements}</div>\n\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n\n\n            </div>\n        </div>\n    );\n};\n\n\n\nexport default Dialogs;","import React from 'react';\nimport {DialogPropsType} from \"./Dialog/Dialog\";\nimport  {MessagePropsType} from \"./Message/Message\";\nimport {sendMessageCreator, updateMessageBodyCreator} from \"../../redux/messages-reducer\";\nimport {RootState} from \"../../redux/redux-store\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\n\n\n\ntype MapDialogsDispatchPropsType = {\n    updateNewMessageBody: (body: string)=>void,\n    sendMessage: (newMessageBody: string)=>void\n}\n\ntype MapStateToPropsType = {\n    dialogs: Array<DialogPropsType>\n    messages: Array<MessagePropsType>\n    // newDialogBody: string\n}\n\nconst mapStateToProps = (state: RootState)=>{\n    return {\n        dialogs: state.dialogs.dialogs,\n        messages: state.messages.messages,\n        // newDialogBody: state.messages.newMessageBody,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch):MapDialogsDispatchPropsType=>{\n    return {\n        updateNewMessageBody: (body: string)=>{\n            dispatch(updateMessageBodyCreator(body))\n        },\n        sendMessage: (newMessageBody: string)=>{\n            dispatch(sendMessageCreator(newMessageBody))\n\n        }\n    }\n\n}\n\n// const WithAuthRedirect = (props: any)=>{\n//     if (!props.isAuth) return <Redirect to={'/Login'}/>\n//     return <Dialogs {...props} />\n// }\n\n// export default  withAuthRedirect(connect<MapStateToPropsType, MapDialogsDispatchPropsType, any, RootState>(mapStateToProps,mapDispatchToProps)(Dialogs));\n\nexport default compose<React.ComponentType>(\n    connect<MapStateToPropsType, MapDialogsDispatchPropsType, any, RootState>(mapStateToProps,mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"formsControls_error__cn73h\"};","import React from \"react\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from \"./formsControls.module.css\"\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({meta, children})=>{\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div>\r\n            <div className={hasError ? s.error : \"\"}>\r\n                {children}\r\n            </div>\r\n            <div className={s.error}>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n    export const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) =>{\r\n        return (\r\n            <FormControl input={input} meta={meta}>\r\n                <input {...input} {...restProps}/>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState):mapStateToPropsType =>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n\r\nconst RedirectComponent = (props:mapStateToPropsType)=>{\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/Login'}/>\r\n    return <Component {...restProps as T}/>\r\n\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","export const  required= (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'field is required'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) =>{\r\n    return value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n    }\r\n\r\n"],"names":["props","className","classes","activeClassName","to","id","name","message","AddMessageFormRedux","reduxForm","form","maxLengthCreator50","maxLengthCreator","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElements","dialogs","map","dialog","messagesElements","messages","values","sendMessage","newMessageBody","console","log","compose","connect","state","dispatch","updateNewMessageBody","body","updateMessageBodyCreator","sendMessageCreator","withAuthRedirect","Dialogs","FormControl","meta","children","hasError","touched","error","s","input","restProps","Input","mapStateToProps","isAuth","auth","Component","value","maxLength","length","undefined"],"sourceRoot":""}