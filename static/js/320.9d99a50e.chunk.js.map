{"version":3,"file":"static/js/320.9d99a50e.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileInfo/Profile.tsx","redux/profile-selectors.ts","components/Profile/ProfileContainer.tsx","webpack://social-network/./src/components/common/FormsControls/formsControls.module.css?b53e","components/common/FormsControls/FormsControls.tsx","hoc/WithAuthRedirect.tsx","utils/validators/validators.ts","webpack://social-network/./src/components/Users/users.module.css?9211","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"MainContent\":\"MyPosts_MainContent__bcUGb\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__w9INx\"};","import React from 'react';\nimport classes from './Post.module.css'\n\nexport type PostPropsType = {\n    id: number\n    message: string\n    avatar: string\n    likeQuantity: number\n}\n\n\n\nconst Post = (props: PostPropsType) => {\n    return (\n        <div className={classes.MainContent}>\n\n                <div className={classes.item}>\n                    <img alt={'avatar'} src={props.avatar}/>\n                    {props.message}\n                    <div>like {props.likeQuantity}</div>\n                </div>\n\n            </div>\n\n    );\n};\n\nexport default Post;\n","import React from 'react';\nimport classes from './MyPosts.module.css'\nimport Post, {PostPropsType} from \"./Post/Post\";\nimport {ActionType} from \"../../../redux/redux-store\";\nimport {reduxForm} from \"redux-form\";\nimport {AddNewPostForm} from \"./AddNewPostForm\";\n\ntype MyPostsPropsType = {\n    posts: Array<PostPropsType>\n    addPost: (newPostText: string) => void\n    dispatch?: (action: ActionType) => void\n}\n\ntype ValuesType = {\n    newPostText: string\n}\n\n\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\n\n    let postElement = props.posts.map(post => <Post key={post.id} id={post.id} message={post.message}\n                                                    avatar={post.avatar}\n                                                    likeQuantity={post.likeQuantity}/>)\n\n    const addPost = (values: any) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={classes.MainContent}>\n            <AddNewPostFormRedux onSubmit={addPost}/>\n            <div>New posts</div>\n            {postElement}\n        </div>\n    );\n});\n\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\n\nexport default MyPosts;","import {Field, InjectedFormProps} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport const AddNewPostForm = (props: InjectedFormProps) => {\r\n\r\n    const maxLength10 = maxLengthCreator(10)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>My posts<div>\r\n                    <Field component={Textarea} name={\"newPostText\"} validate={[required, maxLength10]}/>\r\n                    <div>\r\n                        <button>Add Post\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from 'react';\nimport {PostPropsType} from \"./Post/Post\";\nimport {addPostActionCreator} from \"../../../redux/posts-reducer\";\nimport {RootState} from \"../../../redux/redux-store\";\nimport MyPosts from \"./MyPosts\";\nimport {Dispatch} from \"redux\";\nimport {connect} from \"react-redux\";\n\n\nexport type MapPostsDispatchPropsType = {\n    addPost: (newPostText: string)=>void,\n}\n\nexport type MapStateToPropsType = {\n    posts: Array<PostPropsType>,\n}\n\nconst mapStateToProps = (state: RootState)=>{\n    return {\n        posts: state.posts.posts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch):MapPostsDispatchPropsType=>{\n    return {\n        addPost: (newPostText: string)=>{\n            dispatch(addPostActionCreator(newPostText))\n        },\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(MyPosts)","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType)=> {\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateMode=()=>{\r\n        setEditMode(false)\r\n    }\r\n\r\n    const deactivateMode=()=>{\r\n        setEditMode(true)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                {editMode\r\n                    ? <div><span onDoubleClick={activateMode}>{props.status}</span></div>\r\n                    : <div><input onChange={onStatusChange} value={status} autoFocus onBlur={deactivateMode}/></div>\r\n                }\r\n\r\n            </>\r\n        );\r\n}\r\n\r\n","import React from 'react';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport styles from \"../../Users/users.module.css\";\r\nimport s from \"./Profile.module.css\";\r\n\r\n// @ts-ignore\r\nimport userPhoto from \"../../../assets/images/user-profile.png\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    } else\r\n        return (\r\n        <>\r\n            <div className={s.profile}>\r\n                <img alt={'ava'} className={styles.userPhoto} src={props.profile.photos.large !==null\r\n                ? props.profile.photos.large\r\n                    : userPhoto\r\n                }/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                <div className={s.userInfoBlock}>\r\n                    <div> {props.profile.contacts.facebook}</div>\r\n                    <div>{props.profile.contacts.vk}</div>\r\n                    <div>{props.profile.contacts.twitter}</div>\r\n                    <div>{props.profile.contacts.instagram}</div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","import React from 'react';\nimport MyPostsContainer from \"../MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./ProfileInfo\";\nimport {ProfileType} from \"../ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </>\n    );\n};\n\nexport default Profile;","import {RootState} from \"./redux-store\";\r\n\r\nexport const getProfile=(state: RootState) =>{\r\n    return state.posts.profile\r\n}\r\n\r\nexport const getStateStatus=(state: RootState) =>{\r\n    return state.posts.status\r\n}\r\n\r\nexport const getUserId=(state: RootState) =>{\r\n    return state.auth.userId\r\n}\r\n\r\nexport const getIsAuth=(state: RootState) =>{\r\n    return state.auth.isAuth\r\n}\r\n\r\n","import React from 'react';\nimport Profile from \"./ProfileInfo/Profile\";\nimport {RootState} from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/posts-reducer\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\nimport {getIsAuth, getProfile, getStateStatus, getUserId} from \"../../redux/profile-selectors\";\n\nexport type ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\nexport type ProfileType = {\n    userId: number | null\n    status: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\nexport type MapStateToPropsType = {\n    profile: ProfileType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\nexport type MapDispatchToPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getStatus: (userId: number | null) => void\n    updateStatus: (status: string) => void\n}\n\nexport type PathParamsType = {\n    userId: number | null\n}\n\n// @ts-ignore\ntype PropsType = RouteComponentProps<PathParamsType> & MapDispatchToPropsType & MapStateToPropsType\n\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n        return (\n            <>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\n            </>\n        );\n\n    }\n}\n\nlet mapStateToProps = (state: RootState): MapStateToPropsType => ({\n    profile: getProfile(state),\n    status: getStateStatus(state),\n    authorizedUserId: getUserId(state),\n    isAuth: getIsAuth(state)\n})\n\n// let mapStateToProps = (state: RootState): MapStateToPropsType => ({\n//     profile: state.posts.profile,\n//     status: state.posts.status,\n//     authorizedUserId: state.auth.userId,\n//     isAuth: state.auth.isAuth\n// })\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"formsControls_error__cn73h\"};","import React from \"react\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from \"./formsControls.module.css\"\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({meta, children})=>{\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div>\r\n            <div className={hasError ? s.error : \"\"}>\r\n                {children}\r\n            </div>\r\n            <div className={s.error}>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n    export const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) =>{\r\n        return (\r\n            <FormControl input={input} meta={meta}>\r\n                <input {...input} {...restProps}/>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../redux/redux-store\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootState):mapStateToPropsType =>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component:ComponentType<T>) {\r\n\r\nconst RedirectComponent = (props:mapStateToPropsType)=>{\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/Login'}/>\r\n    return <Component {...restProps as T}/>\r\n\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","export const  required= (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'field is required'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) =>{\r\n    return value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n    }\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"users_userPhoto__mInJU\",\"tr\":\"users_tr__5Ab1b\",\"photo\":\"users_photo__qeotk\",\"name\":\"users_name__zYAtB\",\"marginBottom\":\"users_marginBottom__cwPab\",\"table\":\"users_table__gxOmt\",\"status\":\"users_status__BhgCK\",\"button\":\"users_button__cNRX6\",\"span\":\"users_span__5-OgF\",\"selectedPage\":\"users_selectedPage__K79wA\",\"pages\":\"users_pages__LmijR\",\"preloader\":\"users_preloader__SCbU7\",\"paginatorButton\":\"users_paginatorButton__xhNm8\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","className","classes","alt","src","avatar","message","likeQuantity","MyPosts","React","postElement","posts","map","post","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","maxLength10","maxLengthCreator","handleSubmit","Field","component","Textarea","name","validate","required","connect","state","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","s","styles","photos","large","userPhoto","contacts","facebook","vk","twitter","instagram","Preloader","MyPostsContainer","getProfile","getStateStatus","getUserId","auth","userId","getIsAuth","isAuth","ProfileContainer","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter","withAuthRedirect","FormControl","meta","children","hasError","touched","error","input","restProps","Input","mapStateToProps","Component","to","maxLength","length","undefined","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}