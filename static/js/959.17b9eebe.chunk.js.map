{"version":3,"file":"static/js/959.17b9eebe.chunk.js","mappings":"oMACA,G,QAAwB,8B,+CCGlBA,EAA2C,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAC/CC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACI,4BACI,gBAAKC,UAAWH,EAAWI,EAAU,GAArC,SACKL,KAEL,gBAAKI,UAAWC,EAAhB,SACKJ,IAAY,0BAAOF,EAAKI,cAM5BG,EAAwC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOR,EAAwB,EAAxBA,KAASS,GAAe,YAClF,OACI,SAACV,EAAD,CAAaS,MAAOA,EAAOR,KAAMA,EAAjC,UACI,uCAAcQ,GAAWC,OAKpBC,EAAqC,SAAC,GAAgC,IAA/BF,EAA8B,EAA9BA,MAAOR,EAAuB,EAAvBA,KAASS,GAAc,YAC9E,OACI,SAACV,EAAD,CAAaS,MAAOA,EAAOR,KAAMA,EAAjC,UACI,oCAAWQ,GAAWC,Q,6GC5BtC,EAAuB,wBAAvB,EAAoD,sBAApD,EAAsF,6BAAtF,EAAsI,oC,4ECgBzHE,EAAuD,SAACC,GACjE,OACI,iCACI,qDACI,cAAGC,KAAM,wCACNC,OAAQ,SADX,uBAIJ,oEACA,sDACA,2CACJ,kBAAMC,SAAUH,EAAMI,aAAcX,UAAWC,EAA/C,WACI,0BACI,SAACW,EAAA,EAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWV,EAAAA,EAAOW,SAAU,CAACC,EAAAA,QAE7E,0BACI,SAACL,EAAA,EAAD,CAAOC,YAAa,WAAYK,KAAM,WAAYJ,KAAM,WAAYC,UAAWV,EAAAA,EACxEW,SAAU,CAACC,EAAAA,QAEtB,iBAAKjB,UAAWC,EAAhB,WACI,SAACW,EAAA,EAAD,CAAOM,KAAM,WAAYJ,KAAM,aAAcC,UAAW,UAD5D,kBAGCR,EAAMR,QAAS,gBAAKC,UAAWC,EAAhB,SACXM,EAAMR,SAGX,0BACI,+CAOVoB,GAAiBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,SAA/BD,CAAyCd,GAqBhE,GAAegB,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAuB,CAC3CC,OAAQD,EAAME,KAAKD,UAGiB,CAACE,MAAAA,EAAAA,IAAzC,EAnBc,SAAC,GAAgB,IAAZnB,EAAW,oBAI1B,OAAIA,EAAMiB,QACC,SAAC,KAAD,CAAUG,GAAI,cAGrB,4BACI,eAAI3B,UAAWC,EAAf,oBACA,SAACkB,EAAD,CAAgBT,SATP,SAACkB,GACdrB,EAAMmB,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,4ECvDzD,IAAOd,EAAU,SAACe,GACrB,OAAIA,OACA,EAEO,qBAIFC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,OAAOA,GAASA,EAAMG,OAASD,EAAxB,kBAA+CA,EAA/C,4BAAgFE","sources":["webpack://social-network/./src/components/common/FormsControls/formsControls.module.css?b53e","components/common/FormsControls/FormsControls.tsx","webpack://social-network/./src/components/login/FormStyle.module.css?9a55","components/login/Login.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"formsControls_error__cn73h\"};","import React from \"react\"\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from \"./formsControls.module.css\"\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({meta, children})=>{\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div>\r\n            <div className={hasError ? s.error : \"\"}>\r\n                {children}\r\n            </div>\r\n            <div className={s.error}>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}>\r\n            <textarea {...input} {...restProps}/>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\n    export const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) =>{\r\n        return (\r\n            <FormControl input={input} meta={meta}>\r\n                <input {...input} {...restProps}/>\r\n            </FormControl>\r\n        )\r\n    }\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormStyle_form__p6bmy\",\"h3\":\"FormStyle_h3__KKe4Q\",\"checkText\":\"FormStyle_checkText__wYXhV\",\"formSummaryError\":\"FormStyle_formSummaryError__1YmFE\"};","import React from 'react';\r\nimport s from \"./FormStyle.module.css\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype FormDataType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n    email: string\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <>\r\n            <p>To log in get registered\r\n                <a href={'https://social-network.samuraijs.com/'}\r\n                   target={'_blank'}> here\r\n                </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n        <form onSubmit={props.handleSubmit} className={s.form}>\r\n            <div>\r\n                <Field placeholder={\"Login\"} name={'email'} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} type={'password'} name={'password'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div className={s.checkText}>\r\n                <Field type={\"checkbox\"} name={'rememberMe'} component={\"input\"}/> remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n            </>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm)\r\n\r\nconst Login = ({...props}) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h3 className={s.h3}>Login</h3>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","export const  required= (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    } else {\r\n        return 'field is required'\r\n    }\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) =>{\r\n    return value && value.length > maxLength ? `Must be ${maxLength} characters or less` : undefined\r\n    }\r\n\r\n"],"names":["FormControl","meta","children","hasError","touched","error","className","s","Textarea","input","restProps","Input","LoginForm","props","href","target","onSubmit","handleSubmit","Field","placeholder","name","component","validate","required","type","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe","value","maxLengthCreator","maxLength","length","undefined"],"sourceRoot":""}